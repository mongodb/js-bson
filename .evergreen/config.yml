# Run previous commits to pinpoint a failure's origin.
stepback: true

# Mark failures other than test failures with a purple box.
command_type: system

# Limit maximum test running time.
exec_timeout_secs: 900 # 15 minutes

# What to do when evergreen hits the timeout
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  fetch source:
    - command: git.get_project
      params:
        directory: src
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        add_expansions_to_env: true
        args:
          - .evergreen/setup-environment.sh
    - command: expansions.update
      params:
        file: src/expansion.yml

  install dependencies:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src
        binary: bash
        add_expansions_to_env: true
        args:
          - .evergreen/install-dependencies.sh

  run tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/run-tests.sh

  run checks:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/run-checks.sh

  run typescript:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          TS_VERSION: "${TS_VERSION}"
          TRY_COMPILING_LIBRARY: "${TRY_COMPILING_LIBRARY}"
        binary: bash
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-typescript.sh
  run eslint plugin tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        timeout_secs: 60
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
        binary: bash
        args:
          - .evergreen/run-eslint-plugin-test.sh
  run bundling:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
        args:
          - .evergreen/run-bundling-test.sh
  run benchmarks:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        add_expansions_to_env: true
        args:
          - .evergreen/run-benchmarks.sh
tasks:
  - name: node-tests-v16
    tags: ["node"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 16
      - func: install dependencies
      - func: run tests
        vars:
          TEST_TARGET: node
  - name: node-tests-v18
    tags: ["node"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 18
      - func: install dependencies
      - func: run tests
        vars:
          TEST_TARGET: node
  - name: node-tests-v20
    tags: ["node"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run tests
  - name: node-tests-latest
    tags: ["node"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: latest
      - func: install dependencies
      - func: run tests
        vars:
          TEST_TARGET: node
  - name: web-tests
    tags: ["web"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run tests
        vars:
          TEST_TARGET: web
  - name: bundling-tests
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run bundling
  - name: no-bigint-web-tests
    tags: ["no-bigint", "web"]
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run tests
        vars:
          TEST_TARGET: web
          NO_BIGINT: true
  - name: run-checks
    tags:
      - run-checks
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run checks
  - name: check-typescript-oldest
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: "run typescript"
        vars:
          TS_VERSION: "4.0.2"
          TRY_COMPILING_LIBRARY: "false"
  - name: check-typescript-current
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: "run typescript"
        vars:
          TS_VERSION: ""
          TRY_COMPILING_LIBRARY: "true"
  - name: check-typescript-next
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: "run typescript"
        vars:
          TS_VERSION: "next"
          TRY_COMPILING_LIBRARY: "false"
  - name: run-benchmarks-node
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: v18.16.0
      - func: install dependencies
      - func: run benchmarks
        vars:
          WEB: false 
      - command: perf.send
        params:
          file: src/benchmarks.json
  - name: check-eslint-plugin
    commands:
      - func: fetch source
        vars:
          NODE_LTS_VERSION: 20
      - func: install dependencies
      - func: run eslint plugin tests

buildvariants:
  - name: linux
    display_name: RHEL 8.0
    run_on: rhel80-small
    tasks: [".node", ".web", "check-eslint-plugin"]
  - name: lint
    display_name: lint
    run_on: rhel80-small
    tasks:
      - run-checks
      - check-typescript-oldest
      - check-typescript-current
      - check-typescript-next
      - bundling-tests
  - name: perf
    display_name: RHEL 9.0 perf
    run_on: rhel90-dbx-perf-large
    tasks:
      - run-benchmarks-node
